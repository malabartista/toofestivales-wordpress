/*
A simple jQuery function that can add listeners on attribute change.
http://meetselva.github.io/attrchange/

About License:
Copyright (C) 2013-2014 Selvakumar Arumugam
You may use attrchange plugin under the terms of the MIT Licese.
https://github.com/meetselva/attrchange/blob/master/MIT-License.txt
 */
(function($) {
	function isDOMAttrModifiedSupported() {
		var p = document.createElement('p');
		var flag = false;

		if (p.addEventListener) {
			p.addEventListener('DOMAttrModified', function() {
				flag = true
			}, false);
		} else if (p.attachEvent) {
			p.attachEvent('onDOMAttrModified', function() {
				flag = true
			});
		} else { return false; }
		p.setAttribute('id', 'target');
		return flag;
	}

	function checkAttributes(chkAttr, e) {
		if (chkAttr) {
			var attributes = this.data('attr-old-value');

			if (e.attributeName.indexOf('style') >= 0) {
				if (!attributes['style'])
					attributes['style'] = {}; //initialize
				var keys = e.attributeName.split('.');
				e.attributeName = keys[0];
				e.oldValue = attributes['style'][keys[1]]; //old value
				e.newValue = keys[1] + ':'
						+ this.prop("style")[$.camelCase(keys[1])]; //new value
				attributes['style'][keys[1]] = e.newValue;
			} else {
				e.oldValue = attributes[e.attributeName];
				e.newValue = this.attr(e.attributeName);
				attributes[e.attributeName] = e.newValue;
			}

			this.data('attr-old-value', attributes); //update the old value object
		}
	}

	//initialize Mutation Observer
	var MutationObserver = window.MutationObserver
			|| window.WebKitMutationObserver;

	$.fn.attrchange = function(a, b) {
		if (typeof a == 'object') {//core
			var cfg = {
				trackValues : false,
				callback : $.noop
			};
			//backward compatibility
			if (typeof a === "function") { cfg.callback = a; } else { $.extend(cfg, a); }

			if (cfg.trackValues) { //get attributes old value
				this.each(function(i, el) {
					var attributes = {};
					for ( var attr, i = 0, attrs = el.attributes, l = attrs.length; i < l; i++) {
						attr = attrs.item(i);
						attributes[attr.nodeName] = attr.value;
					}
					$(this).data('attr-old-value', attributes);
				});
			}

			if (MutationObserver) { //Modern Browsers supporting MutationObserver
				var mOptions = {
					subtree : false,
					attributes : true,
					attributeOldValue : cfg.trackValues
				};
				var observer = new MutationObserver(function(mutations) {
					mutations.forEach(function(e) {
						var _this = e.target;
						//get new value if trackValues is true
						if (cfg.trackValues) {							
							e.newValue = $(_this).attr(e.attributeName);
						}						
						if ($(_this).data('attrchange-status') === 'connected') { //execute if connected
							cfg.callback.call(_this, e);
						}
					});
				});

				return this.data('attrchange-method', 'Mutation Observer').data('attrchange-status', 'connected')
						.data('attrchange-obs', observer).each(function() {
							observer.observe(this, mOptions);
						});
			} else if (isDOMAttrModifiedSupported()) { //Opera
				//Good old Mutation Events
				return this.data('attrchange-method', 'DOMAttrModified').data('attrchange-status', 'connected').on('DOMAttrModified', function(event) {
					if (event.originalEvent) { event = event.originalEvent; }//jQuery normalization is not required 
					event.attributeName = event.attrName; //property names to be consistent with MutationObserver
					event.oldValue = event.prevValue; //property names to be consistent with MutationObserver
					if ($(this).data('attrchange-status') === 'connected') { //disconnected logically
						cfg.callback.call(this, event);
					}
				});
			} else if ('onpropertychange' in document.body) { //works only in IE		
				return this.data('attrchange-method', 'propertychange').data('attrchange-status', 'connected').on('propertychange', function(e) {
					e.attributeName = window.event.propertyName;
					//to set the attr old value
					checkAttributes.call($(this), cfg.trackValues, e);
					if ($(this).data('attrchange-status') === 'connected') { //disconnected logically
						cfg.callback.call(this, e);
					}
				});
			}
			return this;
		} else if (typeof a == 'string' && $.fn.attrchange.hasOwnProperty('extensions') &&
				$.fn.attrchange['extensions'].hasOwnProperty(a)) { //extensions/options
			return $.fn.attrchange['extensions'][a].call(this, b);
		}
	}
})(jQuery);
/**
* Admin Settings
*/
var FavoritesAdmin = FavoritesAdmin || {};

FavoritesAdmin.Settings = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.bindEvents = function()
	{
		$(document).ready(function(){
			plugin.toggleButtonTypes();
			plugin.toggleAnonymousSave();
			plugin.toggleLoadingTypeLoad();
			plugin.toggleAuthModalContentField();
			plugin.toggleCustomColorOptions();
			plugin.enableColorPickers();
			plugin.toggleButtonPreviewColors();
			plugin.toggleCountOptions();
			$.each($('[data-favorites-dependency-checkbox]'), function(){
				var item = $(this).parents('.field');
				plugin.toggleDependencyContent(item);
			});
			$('.wp-color-result').attrchange({
				callback: function(){
					plugin.toggleButtonPreviewColors();	
				}
			});
		});
		$(document).on('change', '[data-favorites-dependency-checkbox]', function(){
			var item = $(this).parents('.field');
			plugin.toggleDependencyContent(item);
		});

		// User settings
		$(document).on('change', '*[data-favorites-anonymous-checkbox]', function(){
			plugin.toggleAnonymousSave();
			plugin.toggleAuthModalContentField();
		});
		$(document).on('change', '[data-favorites-require-login-checkbox]', function(){
			plugin.toggleAuthModalContentField();
		});

		// Post type settings
		$(document).on('change', '*[data-favorites-posttype-checkbox]', function(){
			plugin.togglePostTypeOptionsButtons();
		});
		$(document).on('click', '[data-favorites-toggle-post-type-settings]', function(e){
			e.preventDefault();
			plugin.togglePostTypeOptions($(this));
		});

		// Other Display Settings
		$(document).on('change', '[data-favorites-spinner-type]', function(){
			plugin.toggleLoadingType($(this));
		});

		// Favorite Button Content
		$(document).on('change', '[data-favorites-preset-button-select]', function(){
			plugin.toggleButtonTypes();
		});
		$(document).on('click', '[data-favorites-button-preview]', function(e){
			e.preventDefault();
			plugin.togglePreviewButtonState($(this));
		});
		$(document).on('change', '[data-favorites-include-count-checkbox]', function(){
			plugin.toggleCountOptions();
		});

		// Favorite Button Colors
		$(document).on('change', '[data-favorites-custom-colors-checkbox]', function(){
			plugin.toggleCustomColorOptions();
		});
		$(document).on('change', '[data-favorites-button-shadow]', function(){
			plugin.toggleButtonPreviewColors();
		});
		$(document).on('change', '[data-favorites-color-picker]', function(){
			plugin.toggleButtonPreviewColors();
		});
	}

	/**
	* Toggle Post Type Options under Display
	*/
	plugin.togglePostTypeOptions = function(button)
	{
		$(button).parents('.post-type-row').find('.post-type-settings').toggle();
		$(button).toggleClass('button-primary');
	}

	/**
	* Toggle the "Options" button under post type rows
	*/
	plugin.togglePostTypeOptionsButtons = function()
	{
		var postTypeCheckboxes = $('[data-favorites-posttype-checkbox]');
		$.each(postTypeCheckboxes, function(){
			var checked = ( $(this).is(':checked') ) ? true : false;
			var row = $(this).parents('.post-type-row');
			var button = $(row).find('[data-favorites-toggle-post-type-settings]');
			if ( checked ){
				$(button).show();
				return;
			}
			$(button).hide();
			$(row).find('.post-type-settings').hide();
		});
	}

	/**
	* Toggle Dependency Content Depending on whether the setting is checked or not
	*/
	plugin.toggleDependencyContent = function(item)
	{
		if ( $(item).find('[data-favorites-dependency-checkbox]').is(':checked') ){
			$(item).find('[data-favorites-dependency-content]').hide();
			return;
		}
		$(item).find('[data-favorites-dependency-content]').show();
	}

	/**
	* Toggle the "Include in count" checkbox with anonymous enabling
	*/
	plugin.toggleAnonymousSave = function()
	{
		if ( $('[data-favorites-anonymous-checkbox]').is(':checked') ){
			$('[data-favorites-anonymous-count]').show();
			$('[data-favorites-require-login]').hide().find('input[type="checkbox"]').attr('checked', false);
			return;
		}
		$('[data-favorites-anonymous-count]').hide().find('input[type="checkbox"]').attr('checked', false);
		$('[data-favorites-require-login]').show();
	}

	/**
	* Toggle Loading Html/Image checkboxes (only allow one)
	*/
	plugin.toggleLoadingTypeLoad = function()
	{
		var ImageCheckbox = $('[data-favorites-spinner-type="image"]');
		if ( $(ImageCheckbox).is(':checked') ){
			$('[data-favorites-spinner-type="html"]').attr('checked', false);
			return;
		}
		$('[data-favorites-spinner-type="image"]').attr('checked', false);
	}

	/**
	* Toggle Loading Html/Image checkboxes (only allow one)
	*/
	plugin.toggleLoadingType = function(checkbox)
	{
		var attr = $(checkbox).attr('data-favorites-spinner-type');
		if ( attr === 'image' ){
			$('[data-favorites-spinner-type="html"]').attr('checked', false);
			return;
		}
		$('[data-favorites-spinner-type="image"]').attr('checked', false);
	}

	/**
	* Toggle the authentication modal content field
	*/
	plugin.toggleAuthModalContentField = function()
	{
		var checked = ( $('[data-favorites-require-login-checkbox]').is(':checked') ) ? true : false;
		if ( checked ){
			$('[data-favorites-authentication-modal-content]').show();
			return;
		}
		$('[data-favorites-authentication-modal-content]').hide();
	}

	/**
	* Toggle the active state for the preview button
	*/
	plugin.togglePreviewButtonState = function(button)
	{
		$(button).toggleClass('active');
		var icon = $(button).attr('data-favorites-button-icon');
		var activeText = $(button).attr('data-favorites-button-active-content');
		var defaultText = $(button).attr('data-favorites-button-default-content');
		var text = ( $(button).hasClass('active') ) ? activeText : defaultText;
		var html = icon + ' ' + text;
		if ( $('[data-favorites-include-count-checkbox]').is(':checked') )
			html += ' <span class="simplefavorite-button-count">2</span>';
		$(button).html(html);
		setTimeout(function(){
			plugin.toggleButtonPreviewColors();
		}, 10);
	}

	/**
	* Toggle the favorite button type previews
	*/
	plugin.toggleButtonTypes = function()
	{
		var type = $('[data-favorites-preset-button-select]').val();
		var previewCont = $('[data-favorites-preset-button-previews]');
		var previewButtons = $('[data-favorites-button-preview]');
		var customOptions = $('[data-favorites-custom-button-option]');
		if ( type === 'custom' ){
			$(previewCont).hide();
			$(customOptions).show();
			return;
		}
		$(customOptions).hide();
		$(previewButtons).hide();
		$(previewCont).show();
		$('[data-favorites-button-preview="' + type + '"]').show();
	}

	/**
	* Toggle the custom color options
	*/
	plugin.toggleCustomColorOptions = function()
	{
		var checked = ( $('[data-favorites-custom-colors-checkbox]').is(':checked') ) ? true : false;
		plugin.toggleButtonPreviewColors();
		if ( checked ){
			$('[data-favorites-custom-colors-options]').show();
			return;
		}
		$('[data-favorites-custom-colors-options]').hide();
	}

	/**
	* Enable Color Pickers
	*/
	plugin.enableColorPickers = function()
	{
		$('[data-favorites-color-picker]').wpColorPicker({
			change : function(event, ui){
				setTimeout(function(){
					plugin.toggleButtonPreviewColors();
				}, 10);
			}
		});
	}

	/**
	* Toggle the button preview colors
	*/
	plugin.toggleButtonPreviewColors = function()
	{
		var button = $('[data-favorites-button-preview]');
		var buttonVisible = $('[data-favorites-button-preview]:visible');

		if ( !$('[data-favorites-custom-colors-checkbox]').is(':checked') ) {
			$(button).removeAttr('style');
			plugin.toggleButtonTypes();
			return;
		}

		// Toggle the shadow
		var shadow = ( $('[data-favorites-button-shadow]').is(':checked') ) ? '' : 'none';
		$(button).css('box-shadow', shadow);

		var propertyState = ( $(buttonVisible).hasClass('active') ) ? '_active' : '_default';
		$(button).css('background-color', plugin.getCurrentColor('background' + propertyState));
		$(button).css('border-color', plugin.getCurrentColor('border' + propertyState));
		$(button).css('color', plugin.getCurrentColor('text' + propertyState));
		$(button).find('i').css('color', plugin.getCurrentColor('icon' + propertyState));
		$(button).find('.simplefavorite-button-count').css('color', plugin.getCurrentColor('count' + propertyState));
	} // toggleButtonPreviewColors

	/**
	* Workaround for Iris color picker not triggering change event on clear
	*/
	plugin.getCurrentColor = function(property)
	{
		var input = $('[data-favorites-color-picker="' + property + '"]');
		value = $(input).val();
		return value;
	}

	/**
	* Toggle Count options
	*/
	plugin.toggleCountOptions = function()
	{
		var checked = ( $('[data-favorites-include-count-checkbox]').is(':checked') ) ? true : false;
		if ( checked ){
			$('.simplefavorite-button-count').show();
			$('[data-favorites-color-option="count_default"]').show();
			$('[data-favorites-color-option="count_active"]').show();
			return;
		}
		$('.simplefavorite-button-count').hide();
		$('[data-favorites-color-option="count_default"]').hide();
		$('[data-favorites-color-option="count_active"]').hide();
	}

	return plugin.bindEvents();
}
/**
* Admin Settings
*/
var FavoritesAdmin = FavoritesAdmin || {};

FavoritesAdmin.ListingCustomizer = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.bindEvents = function()
	{
		$(document).ready(function(){
			plugin.toggleListingCustomizer();
		});
		$(document).on('change', '[data-favorites-listing-customizer-checkbox]', function(){
			plugin.toggleListingCustomizer();
		});
		$(document).on('click', '[data-favorites-listing-customizer-variable-button]', function(e){
			e.preventDefault();
			plugin.addFieldToEditor($(this));
		});
	}

	/**
	* Toggle the listing customizer
	*/
	plugin.toggleListingCustomizer = function()
	{
		if ( $('[data-favorites-listing-customizer-checkbox]').is(':checked') ){
			$('[data-favorites-listing-customizer]').show();
			return;
		}
		$('[data-favorites-listing-customizer]').hide();
	}

	/**
	* Add a field to the editor
	*/
	plugin.addFieldToEditor = function(button)
	{
		var field = $(button).siblings('select').val();
		tinymce.activeEditor.execCommand('mceInsertContent', false, field);
	}

	return plugin.bindEvents();
}
/**
* Primary Favorites Admin Initialization
* @package Favorites
* @author Kyle Phillips - https://github.com/kylephillips/favorites
*
*/

jQuery(document).ready(function(){
	new FavoritesAdmin.Factory;
});

var FavoritesAdmin = FavoritesAdmin || {};

/**
* DOM Selectors Used by the Plugin
*/
FavoritesAdmin.selectors = {
}

/**
* CSS Classes Used by the Plugin
*/
FavoritesAdmin.cssClasses = {
}

/**
* Localized JS Data Used by the Plugin
*/
FavoritesAdmin.jsData = {
}

/**
* WP Form Actions Used by the Plugin
*/
FavoritesAdmin.formActions = {
}

/**
* Primary factory class
*/
FavoritesAdmin.Factory = function()
{
	var plugin = this;
	var $ = jQuery;

	plugin.build = function()
	{
		new FavoritesAdmin.Settings;
		new FavoritesAdmin.ListingCustomizer;
	}

	return plugin.build();
}